export const sampleText = "In React.js, component lifecycle methods are special functions that get called at specific points during a component’s life—from its creation and rendering to its updating and eventual removal from the DOM. These methods are particularly relevant in class components and provide granular control over what happens when a component mounts, updates, or unmounts. The three main phases of a component lifecycle are mounting, updating, and unmounting. During the mounting phase, methods like constructor(), getDerivedStateFromProps(), render(), and componentDidMount() are invoked in order. constructor() is typically used to initialize state and bind event handlers, while getDerivedStateFromProps() allows state updates based on prop changes (though it's rarely used and often considered an anti-pattern). The render() method returns the JSX to be rendered to the DOM. Finally, componentDidMount() is executed after the component is inserted into the DOM, making it an ideal place for initiating network requests or setting up subscriptions. The updating phase is triggered whenever there is a change in props or state, and it involves methods such as getDerivedStateFromProps(), shouldComponentUpdate(), render(), getSnapshotBeforeUpdate(), and componentDidUpdate(). shouldComponentUpdate() can be used to prevent unnecessary re-renders by returning false when updates are not needed. getSnapshotBeforeUpdate() captures some information from the DOM (like scroll position) before it potentially changes, and componentDidUpdate() is used to perform actions based on the update, such as re-fetching data or updating the DOM. Finally, componentWillUnmount() is called just before a component is removed from the DOM, making it crucial for cleanup tasks like removing event listeners or canceling timers. Though lifecycle methods are central to class components, many of their capabilities have been reimagined in functional components using React Hooks like useEffect, useState, and useLayoutEffect, allowing developers to write more concise and modular code."

export const sampleSummary = "React.js class components follow a specific lifecycle with methods triggered during mounting, updating, and unmounting phases, providing precise control over a component's behavior. Key methods like componentDidMount, shouldComponentUpdate, and componentWillUnmount allow developers to manage data fetching, performance optimization, and cleanup tasks. Many of these lifecycle functionalities have modern equivalents in functional components through React Hooks like useEffect and useState."